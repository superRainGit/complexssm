<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 配置Spring自动扫描的包 -->
	<context:component-scan base-package="cn.zhang.crud">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<context:property-placeholder location="classpath:db.properties" />
	
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="url" value="${mysql.jdbcUrl}"></property>
		<property name="driverClassName" value="${mysql.driverClass}"></property>
		<property name="username" value="${mysql.username}"></property>
		<property name="password" value="${mysql.password}"></property>
		<property name="validationQuery" value="${mysql.queryValidation}"></property>
	</bean>
	
	<!-- 与 Mybstis的整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定从哪个数据源中进行sqlSessionFactory对象的创建 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 指定Mybatis的核心配置文件 -->
		<property name="configLocation" value="classpath:mybatis.xml"></property>
		<!-- 指定Mybatis的mapper映射文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	
	<!-- 指定扫描的Mapper映射类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定扫描哪些包下的Mapper接口 -->
		<property name="basePackage" value="cn.zhang.crud.dao"></property>
		<!-- 指定sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	<!-- 配置一个可以批量插入的SqlSession对象  方便后期进行批量插入的操作 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	
	<!-- Spring对事务的控制 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 指定对哪些方法进行事务控制 -->
	<aop:config>
		<aop:pointcut expression="execution(* cn.zhang.crud.service..*(..))" id="pointCut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut" />
	</aop:config>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 表明其通知的方法都是事务 -->
			<tx:method name="*"/>
			<!-- 如果是query查询  那么可以配置readOnly属性可以让数据库进行优化 -->
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>

</beans>
